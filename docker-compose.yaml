services:
    eureka-server:
        build:
            context: ./eureka-server
            dockerfile: Dockerfile
        ports:
            - "8761:8761"

    gateway-service:
        build:
            context: ./gateway-service
            dockerfile: Dockerfile
        ports:
            - "8080:8080"
        environment:
            EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT_ZONE}
            RESOURCE_SERVICE_EUREKA_HOSTNAME: ${RESOURCE_SERVICE_EUREKA_HOSTNAME}
            SONG_SERVICE_EUREKA_HOSTNAME: ${SONG_SERVICE_EUREKA_HOSTNAME}

    resource-service:
        build:
            context: ./resource-service
            dockerfile: Dockerfile
        ports:
            - "8181:8181"
        depends_on:
            - song-service
            - resource_db
        environment:
            EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT_ZONE}
            RESOURCE_SERVICE_EUREKA_HOSTNAME: ${RESOURCE_SERVICE_EUREKA_HOSTNAME}
            GATEWAY_SERVICE_URL: ${GATEWAY_SERVICE_URL}
            RESOURCE_DB_URL: ${RESOURCE_DB_URL}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

    song-service:
        build:
            context: ./song-service
            dockerfile: Dockerfile
        deploy:
            mode: replicated
            replicas: 2
        ports:
            - "8282"
        depends_on:
            - song_db
        environment:
            SONG_SERVICE_EUREKA_HOSTNAME: ${SONG_SERVICE_EUREKA_HOSTNAME}
            EUREKA_SERVER_DEFAULT_ZONE: ${EUREKA_SERVER_DEFAULT_ZONE}
            SONG_DB_URL: ${SONG_DB_URL}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}

    resource_db:
        image: postgres:17-alpine3.21
        restart: always
        volumes:
            - ./init-scripts/resource-db/init.sql:/docker-entrypoint-initdb.d/init.sql
        environment:
            PGDATA: /var/lib/postgresql/data/pgdata
            POSTGRES_DB: ${RESOURCE_POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "5433:5432"
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U user -d resourcedb" ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    song_db:
        image: postgres:17-alpine3.21
        restart: always
        volumes:
            - ./init-scripts/song-db/init.sql:/docker-entrypoint-initdb.d/init.sql
        environment:
            PGDATA: /var/lib/postgresql/data/pgdata
            POSTGRES_DB: ${SONG_POSTGRES_DB}
            POSTGRES_USER: ${POSTGRES_USER}
            POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
        ports:
            - "5432:5432"
        healthcheck:
            test: [ "CMD-SHELL", "pg_isready -U user -d songdb" ]
            interval: 10s
            timeout: 5s
            retries: 5
            start_period: 10s

    adminer:
        image: adminer
        restart: always
        ports:
            - 8888:8080